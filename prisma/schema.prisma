// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

enum CardQuality {
  MINT
  NEAR_MINT
  LIGHTLY_PLAYED
  MODERATELY_PLAYED
  HEAVILY_PLAYED
  DAMAGED
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id        String   @id
  name      String
  supertype String
  subtype   String
  hp    String
  types String[]
  evolvesFrom String?
  evolvesTo   String? @db.Text // Store as JSON string
  number String
  artist String
  rarity String 
  image String?
  // Normal prices
  normalLowPrice Float?
  normalMidPrice Float?
  normalHighPrice Float?
  normalMarketVal Float?
  
  // Holofoil prices
  holofoilLowPrice Float?
  holofoilMidPrice Float?
  holofoilHighPrice Float?
  holofoilMarketVal Float?
  
  // Reverse Holofoil prices
  reverseHolofoilLowPrice Float?
  reverseHolofoilMidPrice Float?
  reverseHolofoilHighPrice Float?
  reverseHolofoilMarketVal Float?
  
  // 1st Edition Normal prices
  firstEditionNormalLowPrice Float?
  firstEditionNormalMidPrice Float?
  firstEditionNormalHighPrice Float?
  firstEditionNormalMarketVal Float?
  
  // 1st Edition Holofoil prices
  firstEditionHolofoilLowPrice Float?
  firstEditionHolofoilMidPrice Float?
  firstEditionHolofoilHighPrice Float?
  firstEditionHolofoilMarketVal Float?
  
  // Set relation (optional)
  set   Set  @relation(fields: [setId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  setId String
  setName String @default("Unknown Set")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userCards UserCard[]
}

model UserCard {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  card Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String
  quality CardQuality
  forSale Boolean @default(false)
  price Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes String?

  @@index([userId, cardId])
  @@index([userId, quality])
  @@index([userId, forSale])
}

model Set {
  id        String    @id
  name      String
  series    String
  releaseDate DateTime
  total     Int
  symbolImage String?
  logoImage  String?
  cards     Card[]

  createdAt DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime? @map("email_verified")
  password           String?
  image              String?
  verificationToken  String?   @unique
  verificationExpires DateTime?
  accounts           Account[]
  sessions           Session[]
  verificationTokens EmailVerificationToken[]
  userCards UserCard[]
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("email_verification_tokens")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
